#+title: Ja0nz Emacs Configuration
#+STARTUP: overview
#+PROPERTY: header-args:emacs-lisp :tangle ~/.doom.d/config.el :mkdirp yes

Here are some additional functions/macros that could help you configure Doom:
- `load!' for loading external *.el files relative to this one
- `use-package!' for configuring packages
- `after!' for running code after a package has loaded
- `add-load-path!' for adding directories to the `load-path', relative to this file. Emacs searches the `load-path' when you load packages with `require' or `use-package'.
- `map!' for binding new keys

* Mapping documentation
a -> avy
p -> projectile
v -> magit
** Org -> l
q -> set tags
o -> category
t -> org-(t)odo
c E -> (c)lock (e)ffort
d s -> (d)ate (s)chedule
d t/T -> (d)ate (t)imestamp
s c -> (s)ubtree (c)lone
s r -> (s)ubtree (r)efile

* File Headers
#+begin_src emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+end_src

#+begin_src emacs-lisp :tangle ~/.doom.d/packages.el
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el
#+end_src

* C-c rebinding :lib:
-> taken from https://github.com/darkstego/rebinder.el
#+begin_src emacs-lisp
(defun rebinder-dynamic-binding (key &optional toggle)
  "Act as KEY definition in the current context.
This uses an extended menu item's capability of dynamically computing a
definition.  This idea came from general.el.
TOGGLE changes keymaps associated from Ctrl to regular key and vice versa"
  `(menu-item
     ,""
     nil
     :filter
     (lambda (&optional _)
        ,`(rebinder-key-binding ,key ,toggle))))


;; should probably use let instead of double call to (car x)
(defun rebinder-minor-mode-key-binding (key)
  "Gets list of minor mode keybindings for KEY while ignoring the override map."
  (let ((active-maps nil))
     (mapc (lambda (x)
                (when (and (symbolp (car x)) (symbol-value (car x)))
                  (add-to-list 'active-maps  (lookup-key (cdr x) (kbd key)))))
             minor-mode-map-alist )
     (make-composed-keymap active-maps)))


;; might need to do keymap inheretence to perserve priority
(defun rebinder-key-binding (key &optional toggle)
  "Get the keymap of associated KEY.
If TOGGLE is non-nil then the Ctrl status of all bindings in the returned keymap
will be changed."
  (let ((map (make-composed-keymap (list (rebinder-minor-mode-key-binding key) (local-key-binding (kbd key)) (global-key-binding (kbd key))))))
     (if toggle
          (mapcar 'rebinder-toggle-ctrl map)
        map)))

(defun rebinder-toggle-ctrl (item)
  "Return ITEM key with all Ctrl status of binding toggled."
  (cond
    ((and (listp item)
          (not (listp (cdr item))))
     (cons (rebinder-toggle-ctrl (car item)) (cdr item)))
    ((listp item)
     (mapcar 'rebinder-toggle-ctrl item))
    ((event-basic-type item)
     (let ((mods (event-modifiers item))
           (key (event-basic-type item)))
       (if (member 'control mods)
           (event-convert-list (append (remove 'control mods) (list key)))
         (event-convert-list (append (append mods '(control)) (list key))))))
    (t item)))


(defvar rebinder-mode-map (make-sparse-keymap))
(defvar rebinder-link-mode)
(defvar rebinder-mode)

(defun rebinder-override ()
  "Add modemap to override prefix into ‘minor-mode-overriding-map-alist’."
  (interactive)
  (add-to-list 'minor-mode-overriding-map-alist (cons 'rebinder-mode rebinder-mode-map)))
(add-hook 'after-change-major-mode-hook 'rebinder-override)


;; Remove overrides on mode exit
(defun rebinder-update-override ()
  "Update override mode to match linked mode."
  (setq rebinder-mode (symbol-value rebinder-link-mode)))


(defun rebinder-hook-to-mode (mode modehook)
  "Link rebinder override map to associated MODE and MODEHOOK."
  (setq rebinder-link-mode mode)
  (add-hook modehook 'rebinder-update-override))
#+end_src

* Base settings
** Prelude
#+begin_src emacs-lisp
;; Some functionality uses this to identify you, e.g. GPG configuration, email clients, file templates and snippets.
(setq user-full-name "Ja0nz"
      user-mail-address "mail@ja.Use")

;; ii nz instead of jk - Neo2 Keyboard layout
;;(use-package! evil-escape
;; :init (setq evil-escape-key-sequence "ii"))

;; Use primary selection instead of clipboard
(setq select-enable-primary t)

;; No evil snipe mode if there is avy!
;;(remove-hook 'doom-first-input-hook #'evil-snipe-mode)
;;(map! :n "s" #'evil-avy-goto-char-timer)
;;(map! :n "S" #'evil-avy-goto-char)

;;(define-key evil-normal-state-map (kbd "s") 'evil-avy-goto-char-timer)
;;(define-key evil-normal-state-map (kbd "S") 'avy-goto-char)

;; No custom file to prevent emacs from buffering agenda files
(setq custom-file "/dev/null")

;; Antagonist for evil-goto-definition -> g d; jump back with -> g b
;;(map! :map evil-motion-state-map
;;      :prefix "g"
;;      "b" #'evil-jump-backward
;;      "B" #'avy-pop-mark)

;; Set chromium as browser
;; Normally the default browser is fine, but with brave/chromium on the same machine things getting tricky
;;(setq browse-url-browser-function 'browse-url-chromium)

;; Smother scrolling
(setq pixel-scroll-precision-mode t)
#+end_src
** C-c -> M-SPC rebind
#+begin_src emacs-lisp
(define-key global-map (kbd "M-SPC") (rebinder-dynamic-binding "C-c"))
(rebinder-hook-to-mode 't 'after-change-major-mode-hook)
#+end_src

** Theming
#+begin_src emacs-lisp
;; There are two ways to load a theme. Both assume the theme is installed and available. You can either set `doom-theme' or manually load a theme with the `load-theme' function. This is the default:
(setq doom-theme 'doom-dracula)

;; This determines the style of line numbers in effect. If set to `nil', line numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type t)

;; Fonts settings
(setq doom-font (font-spec :family "JetBrainsMono Nerd Font" :size 15)
      doom-variable-pitch-font (font-spec :family "Arimo Nerd Font" :size 15)
      doom-big-font (font-spec :family "JetBrainsMono Nerd Font" :size 24))
(after! doom-themes
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t))
(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic))
#+end_src

** wind move window switch
#+begin_src emacs-lisp
(map! :map global-map "M-n" #'windmove-left)
(map! :map global-map "M-t" #'windmove-right)
(map! :map global-map "M-g" #'windmove-up)
(map! :map global-map "M-r" #'windmove-down)
#+end_src
** Workspace switch (non evil mode)
#+begin_src emacs-lisp
(defun my/ws (fn) (when (string-match-p "no workspace" (funcall fn)) (+workspace/new)))
(map! :map global-map "M-1" #'(lambda () (interactive) (my/ws '+workspace/switch-to-0)))
(map! :map global-map "M-2" #'(lambda () (interactive) (my/ws '+workspace/switch-to-1)))
(map! :map global-map "M-3" #'(lambda () (interactive) (my/ws '+workspace/switch-to-2)))
(map! :map global-map "M-4" #'(lambda () (interactive) (my/ws '+workspace/switch-to-3)))
#+end_src
** Custom set variables
Just a dump for some used (project) variables
#+begin_src emacs-lisp
(custom-set-variables
 '(safe-local-variable-values
   '(
      ;; import org agenda files on demand
      (eval . (org-agenda-file-to-front))
      ;; set buffer local
      (ispell-local-dictionary . #'stringp)
      ;; bow ox-hugo to work with non hugo environments
      ;; https://github.com/kaushalmodi/ox-hugo
      (org-hugo-external-file-extensions-allowed-for-copying . nil)
      ;; mark org-use-tag-inheritance as safe
      (org-use-tag-inheritance . nil)
      ;; Language learning bench
      (eval . (progn (org-babel-goto-named-src-block "bench") (org-babel-execute-src-block)))
     )))
#+end_src
** Yas Snippet Directory
#+begin_src emacs-lisp
(setq +snippets-dir "~/sysconf/_home-manager/emacs/snippets")
#+end_src
** Calendar locale
#+begin_src emacs-lisp
(setq calendar-date-style "european"
      calendar-week-start-day 1)
#+end_src
* LSP mode config
- Ignoring spago *output* directory
- Ignoring @rule commonly used in tailwind
#+begin_src emacs-lisp
(after! lsp-mode
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]\\output\\'")
  (setq lsp-css-lint-unknown-at-rules "ignore")
)
#+end_src
** LSP TailwindCSS
#+begin_src emacs-lisp :tangle ~/.doom.d/packages.el
(package! lsp-tailwindcss :recipe (:host github :repo "merrickluo/lsp-tailwindcss"))
#+end_src

#+begin_src emacs-lisp
(use-package! lsp-tailwindcss)
#+end_src

* Consult -> M-SPC M-SPC; Search: s {g,a,l,p} :global:
#+begin_src emacs-lisp
(map! :leader
      :desc "Quick Buffer/File Switcher" "M-SPC" #'consult-buffer)

;; Consult search buffer
(map! :leader
      :prefix "s"
      :desc "Consult Org Goto Heading" "g" #'consult-org-heading
      :desc "Consult Org Goto Heading" "l" #'consult-line
      :desc "Consult Org Agenda" "a" #'consult-org-agenda
      :desc "Consult Ripgrep" "r" #'consult-ripgrep)
#+end_src
* Embark -> M-SPC SPC :global:
https://karthinks.com/software/fifteen-ways-to-use-embark
#+begin_src emacs-lisp
(map! :leader :desc "Embark act" "SPC" #'embark-act)
#+end_src

* Avy -> M-SPC a :global:
#+begin_src emacs-lisp
(setq avy-all-windows t)
(map! :leader
      "a" nil
      :prefix "a"
      :desc "Char" "e" #'avy-goto-char
      :desc "Timer" "a" #'avy-goto-char-timer
      :desc "Word" "i" #'avy-goto-word-1
      :desc "Line end" "l e" #'avy-goto-end-of-line
      :desc "Line start" "l s" #'avy-goto-line)
#+end_src
** Avy Actions :global:
https://karthinks.com/software/avy-can-do-anything/

*** Avy repeat action; char-timer :lib:
-> Only *avy-goto-char-timer*
#+begin_src emacs-lisp
(defun my/avy--read-candidates ()
  (let ((re-builder #'regexp-quote)
        break overlays regex)
    (unwind-protect
        (progn
          (avy--make-backgrounds
           (avy-window-list))
          ;; Unhighlight
          (dolist (ov overlays)
            (delete-overlay ov))
          (setq overlays nil)
          ;; Highlight
          (when (>= (length avy-text) 1)
            (let ((case-fold-search
                   (or avy-case-fold-search (string= avy-text (downcase avy-text))))
                  found)
              (avy-dowindows current-prefix-arg
                (dolist (pair (avy--find-visible-regions
                               (window-start)
                               (window-end (selected-window) t)))
                  (save-excursion
                    (goto-char (car pair))
                    (setq regex (funcall re-builder avy-text))
                    (while (re-search-forward regex (cdr pair) t)
                      (unless (not (avy--visible-p (1- (point))))
                        (let* ((idx (if (= (length (match-data)) 4) 1 0))
                               (ov (make-overlay
                                    (match-beginning idx) (match-end idx))))
                          (setq found t)
                          (push ov overlays)
                          (overlay-put
                           ov 'window (selected-window))
                          (overlay-put
                           ov 'face 'avy-goto-char-timer-face)))))))
              ;; No matches at all, so there's surely a typo in the input.
              (unless found (beep))))
          (nreverse (mapcar (lambda (ov)
                              (cons (cons (overlay-start ov)
                                          (overlay-end ov))
                                    (overlay-get ov 'window)))
                            overlays)))
      (dolist (ov overlays)
        (delete-overlay ov))
      (avy--done))))

(defun my/avy-repeat-action ()
  (setq avy--old-cands (my/avy--read-candidates))
  (avy-process avy--old-cands))
#+end_src
*** Org agenda todo -> d
#+begin_src emacs-lisp
(defun avy-action-org-agenda-done (pt)
    (save-excursion
      (goto-char pt)
      (org-agenda-todo))
    (select-window
     (cdr (ring-ref avy-ring 0)))
    (my/avy-repeat-action) t)

(after! avy
   (setf (alist-get ?D avy-dispatch-alist) 'avy-action-org-agenda-done))
#+end_src

*** Pomodoro clock in -> t
#+begin_src emacs-lisp
(defun avy-action-org-pomodoro (pt)
  (save-excursion
    (goto-char pt)
    (org-pomodoro))
  (select-window
   (cdr (ring-ref avy-ring 0)))
  t)

(after! avy
  (setf (alist-get ?t avy-dispatch-alist) 'avy-action-org-pomodoro))
#+end_src

*** Kill text selection or line -> k | K
#+begin_src emacs-lisp
;; Kill text
(defun avy-action-kill-whole-line (pt)
  (save-excursion
    (goto-char pt)
    (kill-whole-line))
  (select-window
   (cdr
    (ring-ref avy-ring 0)))
  t)

(after! avy
  (setf (alist-get ?k avy-dispatch-alist) 'avy-action-kill-stay
        (alist-get ?K avy-dispatch-alist) 'avy-action-kill-whole-line))
#+end_src

*** Copy text selection or line -> c | C
#+begin_src emacs-lisp
(defun avy-action-copy-whole-line (pt)
  (save-excursion
    (goto-char pt)
    (cl-destructuring-bind (start . end)
        (bounds-of-thing-at-point 'line)
      (copy-region-as-kill start end)))
  (select-window
   (cdr
    (ring-ref avy-ring 0)))
  t)

(after! avy
  (setf (alist-get ?c avy-dispatch-alist) 'avy-action-copy
        (alist-get ?C avy-dispatch-alist) 'avy-action-copy-whole-line))
#+end_src

*** Yank text (paste immediately) selection or line -> y | Y
#+begin_src emacs-lisp
(defun avy-action-yank-whole-line (pt)
  (avy-action-copy-whole-line pt)
  (save-excursion (yank))
  t)

(after! avy
  (setf (alist-get ?y avy-dispatch-alist) 'avy-action-yank
        (alist-get ?Y avy-dispatch-alist) 'avy-action-yank-whole-line))
#+end_src

*** Teleport selection or line -> g | G
#+begin_src emacs-lisp
;; Transpose/Move text
(defun avy-action-teleport-whole-line (pt)
  (avy-action-kill-whole-line pt)
  (save-excursion (yank)) t)

(after! avy
  (setf (alist-get ?g avy-dispatch-alist) 'avy-action-teleport
        (alist-get ?G avy-dispatch-alist) 'avy-action-teleport-whole-line))
 #+end_src

*** Mark to char -> M
#+begin_src emacs-lisp
(defun avy-action-mark-to-char (pt)
  (activate-mark)
  (goto-char pt))

(after! avy
  (setf (alist-get ?M  avy-dispatch-alist) 'avy-action-mark-to-char))
#+end_src

*** Flyspell -> ;
#+begin_src emacs-lisp
;; Flyspell words
(defun avy-action-flyspell (pt)
  (save-excursion
    (goto-char pt)
    (when (require 'flyspell nil t)
      (flyspell-auto-correct-word)))
  (select-window
   (cdr (ring-ref avy-ring 0)))
  t)

;; Bind to semicolon (flyspell uses C-;)
(after! avy
  (setf (alist-get ?\; avy-dispatch-alist) 'avy-action-flyspell))
#+end_src

*** Embark -> .
#+begin_src emacs-lisp
(defun avy-action-embark (pt)
  (unwind-protect
      (save-excursion
        (goto-char pt)
        (embark-act))
    (select-window
     (cdr (ring-ref avy-ring 0))))
  t)
(after! avy
  (setf (alist-get ?. avy-dispatch-alist) 'avy-action-embark))
#+end_src
* Terminal Here -> M-SPC o {o,O} :global:
#+begin_src emacs-lisp :tangle ~/.doom.d/packages.el
(package! terminal-here)
#+end_src

#+begin_src emacs-lisp
(use-package! terminal-here
  :config
  (setq terminal-here-terminal-command 'foot)
  :init
  (map! :leader
        :prefix "o"
        :desc "Launch terminal here" "t" #'terminal-here-launch
        :desc "Launch terminal ROOT" "T" #'terminal-here-project-launch))
#+end_src
* D2 Mode
#+begin_src emacs-lisp :tangle ~/.doom.d/packages.el
(package! d2-mode
   :recipe (:host github :repo "andorsk/d2-mode"))
#+end_src

#+begin_src emacs-lisp
(use-package! d2-mode
  :mode "\\.d2$")
#+end_src
* Org :local:
** Base Settings
#+begin_src emacs-lisp
(setq org-directory "~/Dropbox/org/"
      _tagsorg (concat org-directory "_tags.org")
      _stageorg (concat org-directory "_stage.org")
      _archiveorg (concat org-directory "_archive.org")
      _habitsorg (concat org-directory "_habits.org"))

;; Org Mode - Base Settings
(setq org-global-properties '(("Effort_ALL" . "0:05 0:10 0:25 0:50 1:15 1:40 2:05 2:55 3:45 4:35 5:25 6:15 7:05"))
      org-agenda-files
      (append
       (list _tagsorg _stageorg _habitsorg)
       (directory-files org-directory t (format-time-string "^W%V")))
      org-agenda-bulk-custom-functions
      '((?m (lambda () (call-interactively 'org-agenda-date-later-minutes)))
        (?h (lambda () (call-interactively 'org-agenda-date-later-hours))))
      org-id-link-to-org-use-id 'create-if-interactive
      org-complete-tags-always-offer-all-agenda-tags t
      org-agenda-start-with-clockreport-mode t
      org-agenda-clockreport-parameter-plist '(:link t :properties ("ALLTAGS" "Effort") :fileskip0 t :compact t)
      org-support-shift-select 'always
      org-goto-interface 'outline-path-completion
      org-startup-with-inline-images t)

;; Fancy priorities
(after! org-fancy-priorities
  (setq
   org-fancy-priorities-list '("🟥" "🟨" "🟩")))

;; Org emphasize
(map! :after org :map org-mode-map :localleader "f" #'org-emphasize)
#+end_src
** Org agenda icons
#+begin_src emacs-lisp
(cl-defstruct agendaIcons
  category
  icon)

(defvar agenda-icons/caticons)

(setq agenda-icons/caticons
  (cl-flet ((icon #'make-agendaIcons))
    (list
     ;; Leisure
     (icon :category "lang" :icon "language")
     ;; ON -> netflix, hackernews, zeit.de (non work related)
     (icon :category "ON" :icon "toggle-on")
     ;; OFF -> jog, yoga, kite, bike, hike
     (icon :category "OFF" :icon "toggle-off")
     ;; Work
     (icon :category "feat" :icon "code") ;; a new feature
     (icon :category "fix" :icon "bug") ;; A bug fix
     (icon :category "docs" :icon "book") ;; documentation
     (icon :category "style" :icon "eye") ;; formatting
     (icon :category "refactor" :icon "wrench") ;; nor feat || bug
     (icon :category "perf" :icon "tachometer") ;; performance
     (icon :category "test" :icon "cog") ;; add/correct tests
     (icon :category "build" :icon "cogs") ;; build tooling
     (icon :category "chore" :icon "coffee") ;; other nor src || test
     (icon :category "reverts" :icon "backward")))) ;; revert/rebase commit

(customize-set-value
    'org-agenda-category-icon-alist
    (cl-flet ((icons (lambda (x) (all-the-icons-faicon (agendaIcons-icon x) :height 1))))
      (mapcar
       (lambda (x) (list (agendaIcons-category x)
                    (list (icons x))
                    nil nil)) agenda-icons/caticons)))
#+end_src
** Org Journal -> M-SPC j {n,N,c,s}
#+begin_src emacs-lisp
;; Org Journal Settings
(setq org-journal-dir org-directory
      org-journal-file-type 'weekly
      ;; org-journal-date-prefix "#+title: "
      org-journal-date-format "%a, %x"
      ;; org-journal-time-prefix "* "
      org-journal-file-format "W%V_%Y-%m-%d.org"
      org-journal-file-header "#+STARTUP: show2levels\n"
      ;; But #+title tag back to first line
      ;; org-journal-after-header-create-hook (lambda () (transpose-lines 1))
      ;; Automatic org agenda integration
      org-journal-after-entry-create-hook
      (lambda () (if (not (file-exists-p (buffer-file-name))) (org-agenda-file-to-front t))))
;;org-journal-file-header "#+title: W%V_%Y-%m-%d\n#+roam_key: file:_stage.org\n"
;;org-journal-skip-carryover-drawers (list "LOGBOOK")
#+end_src

*** Org Journal Keymap
#+begin_src emacs-lisp
(map! :map org-journal-mode-map "M-s-n" #'org-journal-previous-entry)
(map! :map org-journal-mode-map "M-s-t" #'org-journal-next-entry)

(map! :leader :prefix "j"
        (:map org-journal-mode-map
         :desc "Org Agenda File To Front" "f" #'org-agenda-file-to-front)
        (:map global-map
         :desc "Org Journal New Entry" "n" #'org-journal-new-entry
         :desc "Org Journal New Scheduled Entry" "N" #'org-journal-new-scheduled-entry
         :desc "Org Journal Open Current" "c" #'org-journal-open-current-journal-file
         :desc "Org Journal Stage" "s" #'(lambda () (interactive) (find-file _stageorg))))
#+end_src
*** Custom Export Clocktable Function :deprecated:
#+begin_src
(defun export-clocktable-csv (&optional week)
  "Export current week (no prefix argument) or weeks in the "
  (interactive "P")
  (let* ((week (if week week 0))
         (time-string (format-time-string "%V"))
         (new-time-number (- (string-to-number time-string) week))
         (new-time-string (number-to-string new-time-number))
         (time-string (if (< new-time-number 10)
                          (concat "0" new-time-string) new-time-string))
         (org-agenda-files (directory-files org-directory t (concat "^W" time-string))))
    (call-interactively #'org-clock-csv-to-file)))
#+end_src
** Org Roam -> M-SPC r {i,t,g,c}
#+begin_src emacs-lisp
;; Org Roam Settings
(defun this/org_roam__bump_revision_date ()
  "Retriving REVISION and replace it naively with current time stamp."
  (when (cond ((eq major-mode 'org-mode))
              ((string-match-p "^[0-9]\\{14\\}-" (file-name-base))))
    (let ((lastrev (car (cdr (car (org-collect-keywords '("REVISION"))))))
          (today (format-time-string (org-time-stamp-format))))
      (cond ((not lastrev) nil)
            ((not (string= lastrev today))
             (save-excursion
               (goto-line 10)
               (when
                 (re-search-backward "^#\\+REVISION: \\(.+\\)" nil t)
                 (replace-match
                  (format "#+REVISION: %s" today) nil nil))))))))

(use-package! org-roam
  :custom
  (org-roam-directory org-directory)
  (org-roam-capture-templates
   '(("d" "default" plain
      "%?"
      :if-new
      (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                 "#+title: ${title}\n#+CREATED: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))\n#+REVISION: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))\n#+STARTUP: overview\n")
      :unnarrowed t)))
  :config
  (setq org-roam-completion-everywhere nil)
  (add-hook! 'after-save-hook #'this/org_roam__bump_revision_date))
  #+end_src

*** Org Roam Keymap
#+begin_src emacs-lisp
(map! :leader :prefix "r"
        (:map org-mode-map
         :desc "Org Roam Node Insert" "i" #'org-roam-node-insert
         ;;:desc "Org Table Column Toggle" "t" #'org-table-toggle-column-width)
         :desc "Org Roam Buffer Toggle" "t" #'org-roam-buffer-toggle)
        (:map global-map
         :desc "Org Roam Goto Node" "g" #'org-roam-node-find
         :desc "Org Roam Capture" "c" #'org-roam-capture))
#+end_src
** Org habit
#+begin_src emacs-lisp
(after! org
  (add-to-list 'org-modules 'org-habit))
#+end_src
** Org Refile
#+begin_src emacs-lisp
;; Org Refile Targets
(after! org-refile
  (setq org-refile-targets
        '((nil :maxlevel . 1) ; Same buffer
          (org-agenda-files :maxlevel . 1)
          (org-buffer-list :maxlevel . 1)
          (_archiveorg :maxlevel . 1)
          (_stageorg :maxlevel . 1))))
#+end_src
** Org Capture
I capture every activity on my laptop by (broad) category. May change over time. Currently, there are following activities:
- development - concrete project development
- research - various technology related explorative/design work
- operations - linux/emacs related time sinks
- spanish - language learning
- cooking - offline topic; Gathering of cooking recipes
#+begin_src emacs-lisp
;; Org Capture Templates
(after! org-capture
  (setq org-capture-templates
         '(("p" "Blog Post" entry (file+headline "~/data/git/ja.nz/README.org" "Posts") "* TODO %^{title}\nSCHEDULED: %t%^{export_hugo_bundle}p%^{export_file_name}p\n#+begin_description\n%?\n#+end_description\n** scratchpad :noexport:\n" :prepend t :jump-to-captured t)
           ("x" "Instant Todo" entry (function org-journal-open-current-journal-file) "* TODO %^{title}\nSCHEDULED: %T%^{CATEGORY}p%^{Effort}p\n%?" :jump-to-captured t))))
#+end_src
*** Backup (untangled)
Backup of the Doom Emacs Capture templates for future reference
#+begin_src
;;https://github.com/hlissner/doom-emacs/blob/f621ff80471e8d08a72e5ece00641c70b121873a/modules/lang/org/config.el#L342
(("t" "Personal todo" entry
  (file+headline +org-capture-todo-file "Inbox")
  "* [ ] %?\n%i\n%a" :prepend t)
 ("n" "Personal notes" entry
  (file+headline +org-capture-notes-file "Inbox")
  "* %u %?\n%i\n%a" :prepend t)
 ("j" "Journal" entry
  (file+olp+datetree +org-capture-journal-file)
  "* %U %?\n%i\n%a" :prepend t)
 ("p" "Templates for projects")
 ("pt" "Project-local todo" entry
  (file+headline +org-capture-project-todo-file "Inbox")
  "* TODO %?\n%i\n%a" :prepend t)
 ("pn" "Project-local notes" entry
  (file+headline +org-capture-project-notes-file "Inbox")
  "* %U %?\n%i\n%a" :prepend t)
 ("pc" "Project-local changelog" entry
  (file+headline +org-capture-project-changelog-file "Unreleased")
  "* %U %?\n%i\n%a" :prepend t)
 ("o" "Centralized templates for projects")
 ("ot" "Project todo" entry #'+org-capture-central-project-todo-file "* TODO %?\n %i\n %a" :heading "Tasks" :prepend nil)
 ("on" "Project notes" entry #'+org-capture-central-project-notes-file "* %U %?\n %i\n %a" :heading "Notes" :prepend t)
 ("oc" "Project changelog" entry #'+org-capture-central-project-changelog-file "* %U %?\n %i\n %a" :heading "Changelog" :prepend t))
#+end_src
** Org MRU Clock
#+begin_src emacs-lisp :tangle ~/.doom.d/packages.el
(package! org-mru-clock)
#+end_src

#+begin_src emacs-lisp
(defun org/insert-clock-entry ()
  (interactive)
  (insert "CLOCK: ")
  (org-time-stamp-inactive)
  (insert "--")
  ;; Inserts the current time by default.
  (let ((current-prefix-arg '(4))) (call-interactively 'org-time-stamp-inactive))
  (org-ctrl-c-ctrl-c))

(map! :map org-mode-map :localleader :prefix "c"
      :desc "Org MRU clock" "m" #'org-mru-clock-in
      :desc "Append manual clock entry" "a" #'org/insert-clock-entry
      :desc "Org Update All DBlocks" "u" #'org-update-all-dblocks)

;; (use-package! org-mru-clock
;;   :bind (:map global-map
;;          ("M-s-t r" . org-mru-clock-in)
;;          ("M-s-t i" . org-clock-in)
;;          ("M-s-t o" . org-clock-out)
;;          ("M-s-t u" . org-update-all-dblocks)))
#+end_src
** Org clock export to csv
#+begin_src emacs-lisp :tangle ~/.doom.d/packages.el
(package! org-clock-csv)
#+end_src
** Org pomodoro
#+begin_src emacs-lisp
(defun this/org-pomodoro-restart ()
  (interactive)
  (let ((use-dialog-box nil))
   (when (y-or-n-p "Start a new pomodoro?")
     (save-window-excursion
       (org-clock-goto)
       (org-pomodoro)))))

(use-package! org-pomodoro
  :custom
    (org-pomodoro-start-sound-p t)
    (org-pomodoro-killed-sound-p t)
    (org-pomodoro-start-sound "GO⏰")
    (org-pomodoro-finished-sound "FINISH🏁")
    (org-pomodoro-overtime-sound "OVERTIME😵")
    (org-pomodoro-killed-sound "KILLED💀")
    (org-pomodoro-short-break-sound "SHORTBREAK☕ FINISHED🏁")
    (org-pomodoro-long-break-sound "LONGBREAK😴 FINISHED🏁")
  :config
    (setq org-pomodoro-audio-player nil)
    (add-hook! org-pomodoro-break-finished #'this/org-pomodoro-restart)
)
#+end_src
** Org hunspell
#+begin_src emacs-lisp
(add-hook! org-mode
  (after! ispell
    (ispell-set-spellchecker-params)
    (ispell-hunspell-add-multi-dic "it_IT,en_US")
    (ispell-hunspell-add-multi-dic "tr_TR,en_US")
    (ispell-hunspell-add-multi-dic "de_DE,en_US")
    ;;(ispell-hunspell-add-multi-dic "pt_BR,en_US")
    ;;(ispell-hunspell-add-multi-dic "fr_FR,en_US")
    ;;(ispell-hunspell-add-multi-dic "es_ES,en_US")
))
#+end_src
** Org FC
From own fork! https://github.com/ja0nz/org-fc

#+begin_src emacs-lisp :tangle ~/.doom.d/packages.el
(package! org-fc
  :recipe
  (:host github :repo "ja0nz/org-fc"
   :files (:defaults "awk" "demo.org")))
#+end_src

#+begin_src
(use-package! org-fc
  :custom (org-fc-directories '("~/Dropbox/org/"))
  :config
  ;; Hack: https://www.leonrische.me/fc/use_with_evil-mode.html
  (evil-define-minor-mode-key '(normal insert emacs) 'org-fc-review-flip-mode
    (kbd "n") 'org-fc-review-flip
    (kbd "s") 'org-fc-review-suspend-card
    (kbd "q") 'org-fc-review-quit)

  (evil-define-minor-mode-key '(normal insert emacs) 'org-fc-review-rate-mode
    (kbd "u") 'org-fc-review-rate-again
    (kbd "i") 'org-fc-review-rate-hard
    (kbd "a") 'org-fc-review-rate-good
    (kbd "e") 'org-fc-review-rate-easy
    (kbd "s") 'org-fc-review-suspend-card
    (kbd "q") 'org-fc-review-quit)

    ;;(map! :localleader :map org-mode-map "f" nil)
    (map! :leader :prefix "o" :map global-map :desc "Learn dashboard (org-fc)" "l" #'org-fc-dashboard)
    (map! :leader
      :prefix ("l" . "org-fc")
      "c" #'org-fc-type-cloze-init
      "w" #'org-fc-cloze-dwim
      "d" #'org-fc-type-double-init
      "e" #'org-fc-review-edit
      "r" #'org-fc-review-buffer
      "R" #'org-fc-review-resume
      "n" #'org-fc-type-normal-init ))
#+end_src
** Org table copy cell :hack:
#+begin_src emacs-lisp
(defun org/org-table-yank-cell ()
  "Copy cell value and trim surrounding whitepaces."
  (interactive)
  (when (org-at-table-p)
    (kill-new
      (string-trim
        (substring-no-properties(org-table-get-field))))))
#+end_src
** Org purge drawers :hack:
If the habits.org file gets too big it slows down emacs.
This function will clean all the logbook entries.
#+begin_src emacs-lisp
(defun org/purge-logbook-drawer ()
  (interactive)
  (goto-line 1)
  (delete-matching-lines ":LOGBOOK:\\(\n\\|.\\)*?:END:")
  (pop-global-mark))
#+end_src

** Org goto end of subtree :hack:
#+begin_src emacs-lisp
(defun goto-last-heading ()
  "Goto to the end of a subtree at point or for ELEMENT heading."
  (interactive)
  (org-end-of-subtree))
(map! :map evil-normal-state-map "g ." #'goto-last-heading)
#+end_src

#+RESULTS:

** Org babel execute graph-easy :hack:
#+begin_example
\#+BEGIN_SRC graph-easy
strict digraph {
    a [shape="ellipse" style="filled" fillcolor="#1f77b4"]
    b [shape="polygon" style="filled" fillcolor="#ff7f0e"]
    a -> b [fillcolor="#a6cee3" color="#1f78b4"]
}
\#+END_SRC
#+end_example
- cmdline
  - according to easy-graph. Default: --as=ascii
  - useful: --as=boxart|svg|graphml
- file
  - outfile. Default: /dev/stdout
  - outputformat is inferred from file extension (if not overwritten manually with --as=_)

#+begin_src emacs-lisp
(defun org-babel-execute:graph-easy (body params)
  "Execute a block of dot code with org-babel:graph-easy."
  (let* ((out-file (or (cdr (assq :file params)) "/dev/stdout"))
        (in-file (org-babel-temp-file "tmp" ".dot"))
        (cmdline (or (cdr (assq :cmdline params))
                     (if-let ((ext (file-name-extension out-file)))
                         (format "--as=%s" ext)
                         (format "--as=%s" "ascii"))))
        (cmd (or (cdr (assq :cmd params)) "graph-easy")))
    (with-temp-file in-file
      (insert body))
    (org-babel-eval
     (concat cmd
        " --input=" (org-babel-process-file-name in-file)
        " " cmdline
        " --output=" (org-babel-process-file-name out-file)) "")))
#+end_src
* Caddyfile :local:
#+begin_src emacs-lisp :tangle ~/.doom.d/packages.el
(package! caddyfile-mode)
#+end_src

#+begin_src emacs-lisp
(use-package! caddyfile-mode
  :mode
  (("Caddyfile\\'" . caddyfile-mode)
   ("caddy\\.conf\\'" . caddyfile-mode)))
#+end_src

#+RESULTS:

* aa2u artist mode to unicode :local:
#+begin_src emacs-lisp :tangle ~/.doom.d/packages.el
(package! ascii-art-to-unicode)
#+end_src

* Bump lsp :hack:
#+begin_src emacs-lisp :tangle ~/.doom.d/packages.el
(package! lsp-mode :pin "61349dd9102e0f15fba3ec583844108dc584357f")
#+end_src

* Web Mode
#+begin_src emacs-lisp
(use-package! web-mode
  :mode "\\.astro$"
  :config (setq
     ;; check indent -> lsp--formatting-indent-alist
     standard-indent 2
     web-mode-enable-front-matter-block t)
)
#+end_src

** Web Mode :hack:
Related to this issue of web mode: https://github.com/fxbois/web-mode/issues/799
In short: changing dir-locals alone is not working with web mode. This is a hack
to get it working.

#+begin_src
(add-to-list 'safe-local-variable-values '(hack-web-mode-engine . "go"))
(defun hack-web-mode-hook ()
  "Hooks for Web mode. Add a local hook which set the engine to the one specified by
   `hack-web-mode-engine` local variable."
  (add-hook
   'hack-local-variables-hook
   (lambda ()
     (if (boundp 'hack-web-mode-engine)
         (progn
           (message "web-mode-engine is %s" hack-web-mode-engine)
           (web-mode-set-engine hack-web-mode-engine))
       (progn
         (message "no web-mode-engine settled")
         (web-mode-set-engine "none"))))))
(add-hook 'web-mode-hook  'hack-web-mode-hook nil nil)
#+end_src
* KILL MU4E
[[ https://github.com/hlissner/doom-emacs/blob/develop/modules/email/mu4e/README.org][Doom Emacs MU4E]]
#+begin_src emacs-lisp
;; Mu4e settings
(add-to-list 'load-path "~/.nix-profile/share/emacs/site-lisp/mu4e")
(after! mu4e
  (setq mu4e-update-interval 300
        mu4e-sent-messages-behavior (lambda () (if (string-suffix-p "gmail.com" (message-sendmail-envelope-from)) 'delete 'sent))))

(setq mu4e-get-mail-command "mbsync -a"
      starttls-use-gnutls t
      message-citation-line-format "On %a, %d %b %Y at %R, %f wrote:\n"
      message-citation-line-function 'message-insert-formatted-citation-line)
#+end_src

** mail@ja.nz :deprecated:
Handled by gmail now
#+begin_src
(set-email-account! "mail@ja.nz"
                    '((user-mail-address . "mail@ja.nz")
                      (user-full-name . "Ja0nz")
                      (mu4e-sent-folder . "/mail@ja.nz/Sent")
                      (mu4e-drafts-folder . "/mail@ja.nz/Drafts")
                      (mu4e-trash-folder . "/mail@ja.nz/Trash")
                      (mu4e-refile-folder . "/mail@ja.nz/Archive")
                      (mu4e-compose-signature . "\n🤖 Jan Peteler\n💌 mail@ja.nz\n🔖 ja.nz")
                      (smtpmail-smtp-server . "smtp.purelymail.com")
                      (smtpmail-smtp-service . 587)
                      (smtpmail-smtp-user . "mail@ja.nz")
                      (smtpmail-stream-type . starttls)))
#+end_src
** jan.peteler@gmail.com
#+begin_src emacs-lisp
(set-email-account! "jan.peteler@gmail.com"
                    '((user-mail-address . "jan.peteler@gmail.com")
                      (user-full-name . "Jan")
                      (mu4e-sent-folder . "/jan.peteler@gmail.com/Sent")
                      (mu4e-drafts-folder . "/jan.peteler@gmail.com/Drafts")
                      (mu4e-trash-folder . "/jan.peteler@gmail.com/Trash")
                      (mu4e-refile-folder . "/jan.peteler@gmail.com/Archive")
                      (mu4e-compose-signature . "\n🤖 Jan Peteler\n💌 jan.peteler@gmail.com\n🔖 ja.nz")
                      (smtpmail-smtp-server . "smtp.gmail.com")
                      (smtpmail-smtp-service . 587)
                      (smtpmail-smtp-user . "jan.peteler@gmail.com")
                      (smtpmail-stream-type . starttls)))
#+end_src
** Org Contacts Action
#+begin_src emacs-lisp
(setq mu4e-org-contacts-file "~/org/contacts.org")
(after! mu4e
  (add-to-list 'mu4e-headers-actions '("org-contact-add" . mu4e-action-add-org-contact) t)
  (add-to-list 'mu4e-view-actions '("org-contact-add" . mu4e-action-add-org-contact) t))
#+end_src
* KILL Undo tree keybindings -> SPC d
https://elpa.gnu.org/packages/undo-tree.html

Missing argument: undo-tree-switch-branch
I could not find any use from it because going over undo-tree-visualize anyway

#+begin_src
(map! :leader :prefix "d"
        (:map global-map
         :desc "better undo-tree-visualize" "d" #'undo-tree-visualize
         :desc "save buffer state to register" "s" #'undo-tree-save-state-to-register
         :desc "restore buffer state from register" "r" #'undo-tree-restore-state-from-register))

(map! :nie "C-r" #'undo-tree-undo)
(map! :nie "C-M-r" #'undo-tree-redo)
#+end_src
