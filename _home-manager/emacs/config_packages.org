#+title: Ja0nz Emacs Configuration
#+STARTUP: fold
#+PROPERTY: header-args:emacs-lisp :tangle ~/.doom.d/config.el :mkdirp yes

* File Headers
#+begin_src emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+end_src

#+begin_src emacs-lisp :tangle ~/.doom.d/packages.el
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el
#+end_src

* Base settings
Here are some additional functions/macros that could help you configure Doom:
- `load!' for loading external *.el files relative to this one
- `use-package!' for configuring packages
- `after!' for running code after a package has loaded
- `add-load-path!' for adding directories to the `load-path', relative to this file. Emacs searches the `load-path' when you load packages with `require' or `use-package'.
- `map!' for binding new keys

** Prelude
#+begin_src emacs-lisp
;; Some functionality uses this to identify you, e.g. GPG configuration, email clients, file templates and snippets.
(setq user-full-name "Ja0nz"
      user-mail-address "mail@ja.nz")

;; Use nr instead of jk - Neo2 Keyboard layout
(use-package! evil-escape
  :init (setq evil-escape-key-sequence "nr"))

;; No evil snipe mode if there is avy!
(after! evil-snipe
  (evil-snipe-mode -1)
  (define-key evil-normal-state-map (kbd "s") 'evil-avy-goto-char-timer)
  (define-key evil-normal-state-map (kbd "S") 'avy-goto-char))
#+end_src

** Theming, Fonts
#+begin_src emacs-lisp
;; There are two ways to load a theme. Both assume the theme is installed and available. You can either set `doom-theme' or manually load a theme with the `load-theme' function. This is the default:
(setq doom-theme 'doom-laserwave)

;; This determines the style of line numbers in effect. If set to `nil', line numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type t)

;; Fonts settings
(setq doom-font (font-spec :family "JetBrains Mono" :size 15)
      doom-variable-pitch-font (font-spec :family "Noto Sans" :size 15)
      doom-big-font (font-spec :family "JetBrains Mono" :size 24))
(after! doom-themes
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t))
(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic))
#+end_src
* Yas Snippets
#+begin_src emacs-lisp
(setq +snippets-dir "~/sysconf/_home-manager/emacs/snippets")
#+end_src

* Org
** Base Settings
#+begin_src emacs-lisp
;; Org Mode - Base Settings
(setq org-directory "~/Dropbox/org/"
      org-global-properties '(("Effort_ALL". "0:25 0:50 1:15 1:40 2:05 2:55 3:45 4:35 5:25 6:15 7:05"))
      org-agenda-files
      (append
       (list (concat org-directory "_tags.org")
             (concat org-directory "_habits.org"))
       (directory-files
        org-directory t
        (concat "^W" (format-time-string "%V"))))
      org-complete-tags-always-offer-all-agenda-tags t
      org-agenda-start-with-clockreport-mode t
      org-agenda-clockreport-parameter-plist '(:link t :properties ("ALLTAGS" "Effort") :fileskip0 t :compact t)
      org-support-shift-select 'always
      org-goto-interface 'outline-path-completion
      org-startup-with-inline-images t)
#+end_src
** Org Refile
#+begin_src emacs-lisp
;; Org Refile Targets
(after! org-refile
  (setq org-refile-targets
        '((nil :maxlevel . 1)
          (org-agenda-files :maxlevel . 1)
          ("~/Dropbox/org/_archive.org" :maxlevel . 1)
          ("~/Dropbox/org/_kanban.org" :maxlevel . 1))))
#+end_src
** TODO Org Pomodoro
   #+begin_src
     (use-package org-pomodoro
       :bind (("M-s-t t" . org-pomodoro))
       :config
       (setq org-pomodoro-audio-player (executable-find "notify-send")
             org-pomodoro-start-sound-p t
             org-pomodoro-killed-sound-p t
             org-pomodoro-start-sound " *org-pomodoro* - ‚è±START‚è±"
             org-pomodoro-finished-sound " *org-pomodoro* - üèÉFINISHüèÉ"
             org-pomodoro-overtime-sound " *org-pomodoro* - ‚è∞OVERTIME‚è∞"
             org-pomodoro-killed-sound " *org-pomodoro* - üíÄKILLEDüíÄ"
             org-pomodoro-short-break-sound " *org-pomodoro* - üç∞SHORT BREAK FINISHEDüç∞"
             org-pomodoro-long-break-sound " *org-pomodoro* - üçñLONG BREAK FINISHEDüçñ"
             org-pomodoro-ticking-sound " *org-pomodoro* - ü•Åticktackü•Å"))
   #+end_src
** Org Capture
*** Backup
Original for reference
#+begin_src
;;https://github.com/hlissner/doom-emacs/blob/f621ff80471e8d08a72e5ece00641c70b121873a/modules/lang/org/config.el#L342
(("t" "Personal todo" entry
  (file+headline +org-capture-todo-file "Inbox")
  "* [ ] %?\n%i\n%a" :prepend t)
 ("n" "Personal notes" entry
  (file+headline +org-capture-notes-file "Inbox")
  "* %u %?\n%i\n%a" :prepend t)
 ("j" "Journal" entry
  (file+olp+datetree +org-capture-journal-file)
  "* %U %?\n%i\n%a" :prepend t)
 ("p" "Templates for projects")
 ("pt" "Project-local todo" entry
  (file+headline +org-capture-project-todo-file "Inbox")
  "* TODO %?\n%i\n%a" :prepend t)
 ("pn" "Project-local notes" entry
  (file+headline +org-capture-project-notes-file "Inbox")
  "* %U %?\n%i\n%a" :prepend t)
 ("pc" "Project-local changelog" entry
  (file+headline +org-capture-project-changelog-file "Unreleased")
  "* %U %?\n%i\n%a" :prepend t)
 ("o" "Centralized templates for projects")
 ("ot" "Project todo" entry #'+org-capture-central-project-todo-file "* TODO %?\n %i\n %a" :heading "Tasks" :prepend nil)
 ("on" "Project notes" entry #'+org-capture-central-project-notes-file "* %U %?\n %i\n %a" :heading "Notes" :prepend t)
 ("oc" "Project changelog" entry #'+org-capture-central-project-changelog-file "* %U %?\n %i\n %a" :heading "Changelog" :prepend t))
#+end_src
*** Overwrite
#+begin_src emacs-lisp
;; Org Capture Templates
(after! org-capture
  (setq org-capture-templates
        (mapcar
         (lambda (word)
           (list
            (substring word 0 1)
            (concat "Category: " word)
            'entry
            '(function org-journal-open-current-journal-file)
            (concat "* TODO %?\nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+0d\") t)\n:PROPERTIES:\n:CATEGORY: " word  "\n:Effort:   0:25\n:END:\n")
            '(:jump-to-captured t)))
         '("reading" "writing" "looking" "cooking" "sporting"))))
#+end_src
** Org Journal
#+begin_src emacs-lisp
;; Org Journal Settings
(setq org-journal-dir org-directory
      org-journal-date-prefix "#+title: "
      org-journal-date-format "W%V_%Y-%m-%d"
      org-journal-time-prefix "* "
      org-journal-file-format "W%V_%Y-%m-%d.org"
      org-journal-file-header "#+ref: file:_kanban.org\n"
      ;; But #+title tag back to first line
      org-journal-after-header-create-hook (lambda () (transpose-lines 1))
      ;; Automatic org agenda integration
      org-journal-after-entry-create-hook
      (lambda () (if (not (file-exists-p (buffer-file-name))) (org-agenda-file-to-front t))))
;;org-journal-file-header "#+title: W%V_%Y-%m-%d\n#+roam_key: file:_kanban.org\n"
;;org-journal-skip-carryover-drawers (list "LOGBOOK")
#+end_src
*** Export Clocktable Function
#+begin_src emacs-lisp
(defun export-clocktable-csv (&optional week)
  "Export current week (no prefix argument) or weeks in the "
  (interactive "P")
  (let* ((week (if week week 0))
         (time-string (format-time-string "%V"))
         (new-time-number (- (string-to-number time-string) week))
         (new-time-string (number-to-string new-time-number))
         (time-string (if (< new-time-number 10)
                          (concat "0" new-time-string) new-time-string))
         (org-agenda-files (directory-files org-directory t (concat "^W" time-string))))
    (call-interactively #'org-clock-csv-to-file)))
#+end_src
** Org Roam
#+begin_src emacs-lisp
;; Org Roam Settings
(setq +org-roam-open-buffer-on-find-file nil
      org-roam-directory org-directory
      org-roam-rename-file-on-title-change nil
      org-roam-capture-templates
      '(("d" "default" plain (function org-roam-capture--get-point)
         "%?"
         :file-name "%<%Y%m%d%H%M%S>-${slug}"
         :head "#+title: ${title}\n#+CREATED: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))\n#+REVISION: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))\n#+STARTUP: fold\n"
         :unnarrowed t)))

(defun org_roam__bump_revision_date ()
  "Retriving REVISION and replace it naively with current time stamp."
  (let ((lastrev (car (cdr (car (org-collect-keywords '("REVISION"))))))
        (today (format-time-string (org-time-stamp-format))))
    (cond ((not lastrev) nil)
          ((not (string= lastrev today))
           (progn (push-mark)
                  (re-search-backward "REVISION" nil 1)
                  (if (re-search-forward lastrev nil 1)
                      (replace-match today))
                  (pop-global-mark))))))

(after! org-roam
  (add-hook 'after-save-hook 'org_roam__bump_revision_date nil t))
#+end_src

* MU4E
[[ https://github.com/hlissner/doom-emacs/blob/develop/modules/email/mu4e/README.org][Doom Emacs MU4E]]
#+begin_src emacs-lisp
;; Mu4e settings
(add-to-list 'load-path "~/.nix-profile/share/emacs/site-lisp/mu4e")
(setq mu4e-get-mail-command "mbsync -a"
      mu4e-update-interval 300
      mu4e-sent-messages-behavior (lambda () (if (string-suffix-p "gmail.com" (message-sendmail-envelope-from)) 'delete 'sent))
      starttls-use-gnutls t
      message-citation-line-format "On %a, %d %b %Y at %R, %f wrote:\n"
      message-citation-line-function 'message-insert-formatted-citation-line)
#+end_src
** mail@ja.nz
#+begin_src emacs-lisp
(set-email-account! "mail@ja.nz"
                    '((user-mail-address . "mail@ja.nz")
                      (user-full-name . "Ja0nz")
                      (mu4e-sent-folder . "/mail@ja.nz/Sent")
                      (mu4e-drafts-folder . "/mail@ja.nz/Drafts")
                      (mu4e-trash-folder . "/mail@ja.nz/Trash")
                      (mu4e-refile-folder . "/mail@ja.nz/Archive")
                      (mu4e-compose-signature . "\nü§ñ Jan Peteler\nüíå mail@ja.nz\nüîñ ja.nz")
                      (smtpmail-smtp-server . "smtp.purelymail.com")
                      (smtpmail-smtp-service . 587)
                      (smtpmail-smtp-user . "mail@ja.nz")
                      (smtpmail-stream-type . starttls)))
#+end_src
** jan.peteler@gmail.com
#+begin_src emacs-lisp
(set-email-account! "jan.peteler@gmail.com"
                    '((user-mail-address . "jan.peteler@gmail.com")
                      (user-full-name . "Jan")
                      (mu4e-sent-folder . "/jan.peteler@gmail.com/Sent")
                      (mu4e-drafts-folder . "/jan.peteler@gmail.com/Drafts")
                      (mu4e-trash-folder . "/jan.peteler@gmail.com/Trash")
                      (mu4e-refile-folder . "/jan.peteler@gmail.com/Archive")
                      (mu4e-compose-signature . "\nü§ñ Jan Peteler\nüíå jan.peteler@gmail.com\nüîñ ja.nz")
                      (smtpmail-smtp-server . "smtp.gmail.com")
                      (smtpmail-smtp-service . 587)
                      (smtpmail-smtp-user . "jan.peteler@gmail.com")
                      (smtpmail-stream-type . starttls)))
#+end_src
** Org Contacts Action
#+begin_src emacs-lisp
(setq mu4e-org-contacts-file "~/org/contacts.org")
(after! mu4e
  (add-to-list 'mu4e-headers-actions '("org-contact-add" . mu4e-action-add-org-contact) t)
  (add-to-list 'mu4e-view-actions '("org-contact-add" . mu4e-action-add-org-contact) t))
#+end_src
* Calendar
#+begin_src emacs-lisp
(setq calendar-date-style "european"
      calendar-week-start-day 1)
#+end_src
* Consult
#+begin_src emacs-lisp :tangle ~/.doom.d/packages.el
(package! consult)
#+end_src

#+begin_src emacs-lisp
;; Remap SPC SPC to consult-buffer
(map! :leader
      :desc "Quick Buffer/File Switcher" "SPC" #'consult-buffer)
#+end_src
* Terminal Here
#+begin_src emacs-lisp :tangle ~/.doom.d/packages.el
(package! terminal-here)
#+end_src

#+begin_src emacs-lisp
(setq terminal-here-linux-terminal-command '("alacritty"))
(use-package! terminal-here
  :init
  (map! :leader
        :prefix "o"
        :desc "Launch terminal here" "t" #'terminal-here-launch
        :desc "Launch terminal ROOT" "T" #'terminal-here-project-launch))
#+end_src
